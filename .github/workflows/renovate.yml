name: Renovate

# Run on pull requests, cronjob or manually (dispatch)
on:
  pull_request:
  schedule: [cron: "0 10 * * *"] # 2 AM PST = 10 AM UDT
  workflow_dispatch:
    inputs:
      repos: # Optional input
        description: "List of repos (org/repo)"
        type: string
        required: false
      log_level: # Default input
        description: "Log level"
        default: "INFO"
        type: choice
        required: true
        options: ["INFO", "WARNING", "DEBUG"]


# Cancel any other workflows (PR, cron or manual)
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: {}

jobs:
  validate:
    name: Validate Config
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enhanced config validation
        run: |
          echo "üîç Enhanced config validation..."
          chmod +x scripts/validate-renovate.sh
          ./scripts/validate-renovate.sh
          echo "‚úÖ Enhanced validation passed"

      - name: Basic schema validation
        run: |
          echo "üîç Basic schema validation..."
          npx --yes --package renovate --- "renovate-config-validator --strict default.json renovate.json rules-*.json5"
          echo "‚úÖ Schema validation passed"

      - name: Config resolution test
        run: |
          echo "üîç Config resolution test..."
          RESOLUTION_OUTPUT=$(npx --yes --package renovate --- "renovate --dry-run=full --print-config" 2>&1 || true)

          if echo "$RESOLUTION_OUTPUT" | grep -q -E "(ERROR|Invalid)"; then
            echo "‚ùå Config resolution errors found:"
            echo "$RESOLUTION_OUTPUT" | grep -E "(ERROR|Invalid)" || true
            exit 1
          elif echo "$RESOLUTION_OUTPUT" | grep -q -E "WARN"; then
            echo "‚ö†Ô∏è  Config resolution warnings found:"
            echo "$RESOLUTION_OUTPUT" | grep -E "WARN" || true
            echo "‚úÖ Config resolves successfully (with warnings)"
          else
            echo "‚úÖ Config resolves successfully"
          fi

      - name: Custom rule validation
        run: |
          echo "üîç Custom rule validation..."

          # Check for contradictory pinning rules
          echo "  Checking for contradictory pinning rules..."
          if grep -q '"pinDigests": true' default.json && grep -q '"pinDigests": false' default.json; then
            echo "‚ö†Ô∏è  Found both pinDigests: true and false rules"
            echo "  This is expected for our pinning strategy, but verify the logic is correct"
          else
            echo "‚úÖ PinDigests rules look consistent"
          fi

          # Check for duplicate package rules
          echo "  Checking for duplicate package rules..."
          DUPLICATE_RULES=$(grep -h '"matchPackageNames"' default.json rules-*.json5 2>/dev/null | sort | uniq -d || true)
          if [ -n "$DUPLICATE_RULES" ]; then
            echo "‚ö†Ô∏è  Potential duplicate package rules found:"
            echo "$DUPLICATE_RULES"
          else
            echo "‚úÖ No duplicate package rules detected"
          fi

          # Check for valid update types
          echo "  Checking for valid update types..."
          INVALID_UPDATE_TYPES=$(grep -h '"matchUpdateTypes"' default.json rules-*.json5 2>/dev/null | grep -o '"[^"]*"' | grep -v -E '"(major|minor|patch|pin|pinDigest|digest|lockFileMaintenance|rollback|bump|replacement)"' || true)
          if [ -n "$INVALID_UPDATE_TYPES" ]; then
            echo "‚ö†Ô∏è  Potentially invalid update types found:"
            echo "$INVALID_UPDATE_TYPES"
            echo "  Verify these are valid Renovate update types"
          else
            echo "‚úÖ All update types appear valid"
          fi

      - name: Best practices check
        run: |
          echo "üîç Best practices check..."

          # Check for excessive grouping
          GROUP_COUNT=$(grep -h '"groupName"' default.json rules-*.json5 2>/dev/null | wc -l || echo "0")
          if [ "$GROUP_COUNT" -gt 10 ]; then
            echo "‚ö†Ô∏è  High number of grouping rules ($GROUP_COUNT)"
            echo "  Consider if all groupings are necessary"
          else
            echo "‚úÖ Grouping rules count looks reasonable ($GROUP_COUNT)"
          fi

          # Check for clear descriptions
          UNDESCRIBED_RULES=$(grep -h '"description"' default.json rules-*.json5 2>/dev/null | wc -l || echo "0")
          TOTAL_RULES=$(grep -h '"packageRules"' default.json rules-*.json5 2>/dev/null | wc -l || echo "0")
          if [ "$UNDESCRIBED_RULES" -lt "$TOTAL_RULES" ]; then
            echo "‚ö†Ô∏è  Some rules may be missing descriptions"
            echo "  Consider adding descriptions to all package rules"
          else
            echo "‚úÖ All rules have descriptions"
          fi

          echo "üéâ Enhanced validation completed successfully!"
          echo "The Renovate configuration appears to be valid and well-structured."

      - name: Lint Config for Duplicates
        run: |
          npm install json5@^2.2.3 --no-save
          node lint_renovate_duplicates.mjs *.json *.json5

  run:
    name: Dry-Run
    needs: validate
    env:
      pr_set: bcgov/renovate-config bcgov/quickstart-openshift
    permissions:
      pull-requests: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

        # Run Renovate, dry run
      - name: Renovate Dry-Run
        run: |
          # Process repo list and add to config
          IFS=', ' read -a INPUT <<< "${{ inputs.repos || env.pr_set }}"
          for r in "${INPUT[@]}"; do
            REPOS+="\"$r\","
          done
          REPOS=${REPOS%,*}
          cat <<< $(jq '. | .repositories = ['${REPOS}']' renovate.json) > renovate.json

          # Dry run
          cat <<< $(jq '.+= {"dryRun": "full"}' renovate.json) > renovate.json

      # Run Renovate
      - name: Run Renovate
        uses: renovatebot/github-action@85b17ebd5abf43d1c34c01bd4c8dbb8d45bbc2c7 # v43.0.7
        env:
          LOG_LEVEL: ${{ inputs.log_level || 'INFO' }}
        with:
          configurationFile: renovate.json
          token: ${{ secrets.RENOVATE_TOKEN }}
