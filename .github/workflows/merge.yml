name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Optional version override (e.g., v1.2.3) - leave empty for automatic calculation'
        required: false
        type: string
        default: ''
      force_update_tag:
        description: 'Force update existing tags (use with caution)'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: {}

jobs:
  semantic-release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: |
          # Fetch all tags to ensure version comparison has access to the complete tag history
          git fetch --tags --force
          echo "Available tags:"
          git tag -l

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Node.js (for version calculation only)
        run: |
          echo "Node.js setup complete - using for version calculation only"

      - name: Calculate Next Version
        id: version
        run: |
          set -e
          echo "üîç Calculating next version based on conventional commits..."
          
          # Check if manual version override is provided
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            echo "üìã Using manual version override: ${{ github.event.inputs.version_override }}"
            VERSION_OVERRIDE="${{ github.event.inputs.version_override }}"
            
            # Validate version format (should start with 'v' and be semantic)
            if [[ ! "$VERSION_OVERRIDE" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "‚ùå Invalid version format: $VERSION_OVERRIDE"
              echo "Expected format: vX.Y.Z (e.g., v1.2.3)"
              exit 1
            fi
            
            # Extract version numbers from override
            VERSION_NUM=${VERSION_OVERRIDE#v}
            TAG_NAME="$VERSION_OVERRIDE"
            
            echo "üìã Manual version: $TAG_NAME"
            echo "version=$VERSION_NUM" >> $GITHUB_OUTPUT
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            exit 0
          fi
 
          # Automatic version calculation
          echo "üìã Calculating automatic version..."
          
          # Get the recommended bump type (major, minor, patch)
          BUMP_TYPE=$(npx conventional-recommended-bump --preset angular)
          echo "üìã Recommended bump type: $BUMP_TYPE"
 
          if [ -z "$BUMP_TYPE" ]; then
            echo "‚ùå No new version to release"
            echo "version=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
            exit 0
          fi
 
          # Get the latest version from git tags
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "üìã Latest version: $LATEST_VERSION"
 
          # Extract version numbers
          LATEST_NUM=${LATEST_VERSION#v}
          MAJOR=$(echo "$LATEST_NUM" | cut -d. -f1)
          MINOR=$(echo "$LATEST_NUM" | cut -d. -f2)
          PATCH=$(echo "$LATEST_NUM" | cut -d. -f3)
 
          # Calculate next version based on bump type
          case "$BUMP_TYPE" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "‚ùå Unknown bump type: $BUMP_TYPE"
              exit 1
              ;;
          esac
 
          # Create new version and tag
          VERSION_NUM="$MAJOR.$MINOR.$PATCH"
          TAG_NAME="v$VERSION_NUM"
 
          echo "üìã Next version: $TAG_NAME"
 
          # Output for other steps
          echo "version=$VERSION_NUM" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Skip Changelog Generation
        if: steps.version.outputs.version != ''
        run: |
          echo "üìù Skipping changelog generation - GitHub releases provide changelog automatically"
          echo "‚úÖ Release workflow focuses on versioning and tagging only"

      - name: Create Git Tag
        if: steps.version.outputs.version != ''
        run: |
          set -e
          TAG_NAME="${{ steps.version.outputs.tag }}"
          echo "üè∑Ô∏è  Creating tag: $TAG_NAME"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Clean up any existing local tag to avoid conflicts
          echo "üßπ Cleaning up any existing local tag..."
          git tag -d "$TAG_NAME" 2>/dev/null || echo "No existing local tag to remove"

          # Create new tag
          git tag "$TAG_NAME"
          echo "‚úÖ Tag created locally: $TAG_NAME"

          # Push tag with robust error handling
          echo "üì§ Pushing tag to remote..."
          if git push origin "$TAG_NAME"; then
            echo "‚úÖ Tag pushed successfully: $TAG_NAME"
          else
            echo "‚ùå Failed to push tag: $TAG_NAME"
            echo "üîç Checking if tag already exists remotely..."
            if git ls-remote --tags origin "$TAG_NAME" | grep -q "$TAG_NAME"; then
              if [ "${{ github.event.inputs.force_update_tag }}" = "true" ]; then
                echo "‚ö†Ô∏è WARNING: Force-updating an existing remote tag. This may cause data loss or confusion for users who have already pulled the previous tag."
                git push origin "$TAG_NAME" --force
                echo "‚úÖ Tag force-updated successfully: $TAG_NAME"
              else
                echo "üö´ Tag '$TAG_NAME' already exists remotely. Refusing to force-update."
                echo "If you really want to overwrite the remote tag, re-run this workflow with 'force_update_tag' set to true."
                exit 1
              fi
            else
              echo "‚ùå Tag push failed and doesn't exist remotely"
              echo "Check GITHUB_TOKEN permissions for contents:write"
              exit 1
            fi
          fi

      - name: Create Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        if: steps.version.outputs.version != ''
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          token: ${{ github.token }}
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          body: |
            ## Renovate Config Release

            ### What's New
            This release includes the latest improvements and fixes to the BCGov Renovate configuration.

            ### Usage
            Teams can now use:
            ```json
            {
              "extends": ["github>bcgov/renovate-config#${{ steps.version.outputs.tag }}"]
            }
            ```

            ### Migration for Existing Teams
            If you're using the main branch, consider upgrading to versioned configs:
            ```json
            {
              "extends": ["github>bcgov/renovate-config#v1"]
            }
            ```
            Benefits: stable updates, automatic upgrades, no breaking changes.

                        ### Changes
            See the [GitHub releases](https://github.com/bcgov/renovate-config/releases) for detailed changes.

      - name: Create Major/Minor Version Tags
        if: steps.version.outputs.version != ''
        run: |
          set -e
          # Configure git for tag operations
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Get the version that was just created
          VERSION="${{ steps.version.outputs.tag }}"
          echo "üè∑Ô∏è  Creating major/minor tags for version: $VERSION"

          # Extract major and minor versions
          VERSION_NUM=${VERSION#v}
          MAJOR_VERSION="v${VERSION_NUM%%.*}"
          MINOR_VERSION="v${VERSION_NUM%.*}"

          echo "üìã Major version: $MAJOR_VERSION"
          echo "üìã Minor version: $MINOR_VERSION"

          # Create/update major version tag (e.g., v1)
          echo "üîÑ Updating $MAJOR_VERSION tag..."
          git tag -f $MAJOR_VERSION
          if git push origin $MAJOR_VERSION --force; then
            echo "‚úÖ Updated $MAJOR_VERSION tag"
          else
            echo "‚ùå Failed to push $MAJOR_VERSION tag"
            if [ "${{ github.event.inputs.force_update_tag }}" != "true" ]; then
              echo "üí° Try running with 'force_update_tag: true' if you need to overwrite existing tags"
            fi
            exit 1
          fi

          # Create/update minor version tag (e.g., v1.1)
          echo "üîÑ Updating $MINOR_VERSION tag..."
          git tag -f $MINOR_VERSION
          if git push origin $MINOR_VERSION --force; then
            echo "‚úÖ Updated $MINOR_VERSION tag"
          else
            echo "‚ùå Failed to push $MINOR_VERSION tag"
            if [ "${{ github.event.inputs.force_update_tag }}" != "true" ]; then
              echo "üí° Try running with 'force_update_tag: true' if you need to overwrite existing tags"
            fi
            exit 1
          fi

          echo "üéâ All version tags created: $VERSION, $MINOR_VERSION, $MAJOR_VERSION"
