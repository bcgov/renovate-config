name: Manual Release

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: {}

jobs:
  semantic-release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: |
          # Fetch all tags to ensure changelog generation and version comparison have access to the complete tag history
          git fetch --tags --force
          echo "Available tags:"
          git tag -l

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Calculate Next Version
        id: version
        run: |
          set -e
          echo "üîç Calculating next version based on conventional commits..."
          
          # Get the next version using conventional-changelog-cli
          NEXT_VERSION=$(npx conventional-changelog --preset angular --release-count 0 --dry-run | head -1 | sed 's/^# \[\([^]]*\)\].*/\1/')
          
          if [ -z "$NEXT_VERSION" ]; then
            echo "‚ùå No new version to release"
            echo "version=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract version number and create tag
          VERSION_NUM=$(echo "$NEXT_VERSION" | sed 's/^v//')
          TAG_NAME="v$VERSION_NUM"
          
          echo "üìã Next version: $NEXT_VERSION"
          echo "üè∑Ô∏è  Tag name: $TAG_NAME"
          
          # Output for other steps
          echo "version=$VERSION_NUM" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        if: steps.version.outputs.version != ''
        run: |
          set -e
          echo "üìù Generating changelog for version ${{ steps.version.outputs.tag }}..."
          
          # Generate changelog for latest release only
          npx conventional-changelog --preset angular --release-count 1 --output-file CHANGELOG.md
          
          echo "‚úÖ Changelog generated successfully"

      - name: Create Git Tag
        if: steps.version.outputs.version != ''
        run: |
          set -e
          TAG_NAME="${{ steps.version.outputs.tag }}"
          echo "üè∑Ô∏è  Creating tag: $TAG_NAME"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Clean up any existing local tag to avoid conflicts
          echo "üßπ Cleaning up any existing local tag..."
          git tag -d "$TAG_NAME" 2>/dev/null || echo "No existing local tag to remove"

          # Create new tag
          git tag "$TAG_NAME"
          echo "‚úÖ Tag created locally: $TAG_NAME"

          # Push tag with robust error handling
          echo "üì§ Pushing tag to remote..."
          if git push origin "$TAG_NAME"; then
            echo "‚úÖ Tag pushed successfully: $TAG_NAME"
          else
            echo "‚ùå Failed to push tag: $TAG_NAME"
            echo "üîç Checking if tag already exists remotely..."
            if git ls-remote --tags origin "$TAG_NAME" | grep -q "$TAG_NAME"; then
              echo "‚ö†Ô∏è  Tag already exists remotely, forcing update..."
              git push origin "$TAG_NAME" --force
              echo "‚úÖ Tag force-updated successfully: $TAG_NAME"
            else
              echo "‚ùå Tag push failed and doesn't exist remotely"
              echo "Check GITHUB_TOKEN permissions for contents:write"
              exit 1
            fi
          fi

      - name: Create Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        if: steps.version.outputs.version != ''
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          token: ${{ github.token }}
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          body: |
            ## Renovate Config Release

            ### What's New
            This release includes the latest improvements and fixes to the BCGov Renovate configuration.

            ### Usage
            Teams can now use:
            ```json
            {
              "extends": ["github>bcgov/renovate-config#${{ steps.version.outputs.tag }}"]
            }
            ```

            ### Migration for Existing Teams
            If you're using the main branch, consider upgrading to versioned configs:
            ```json
            {
              "extends": ["github>bcgov/renovate-config#v1"]
            }
            ```
            Benefits: stable updates, automatic upgrades, no breaking changes.

            ### Changelog
            See the [CHANGELOG.md](https://github.com/bcgov/renovate-config/blob/main/CHANGELOG.md) for detailed changes.

      - name: Create Major/Minor Version Tags
        if: steps.version.outputs.version != ''
        run: |
          set -e
          # Get the version that was just created
          VERSION="${{ steps.version.outputs.tag }}"
          echo "üè∑Ô∏è  Creating major/minor tags for version: $VERSION"

          # Extract major and minor versions
          VERSION_NUM=${VERSION#v}
          MAJOR_VERSION="v${VERSION_NUM%%.*}"
          MINOR_VERSION="v${VERSION_NUM%.*}"

          echo "üìã Major version: $MAJOR_VERSION"
          echo "üìã Minor version: $MINOR_VERSION"

          # Create/update major version tag (e.g., v1)
          echo "üîÑ Updating $MAJOR_VERSION tag..."
          git tag -f $MAJOR_VERSION
          if git push origin $MAJOR_VERSION --force; then
            echo "‚úÖ Updated $MAJOR_VERSION tag"
          else
            echo "‚ùå Failed to push $MAJOR_VERSION tag"
            exit 1
          fi

          # Create/update minor version tag (e.g., v1.1)
          echo "üîÑ Updating $MINOR_VERSION tag..."
          git tag -f $MINOR_VERSION
          if git push origin $MINOR_VERSION --force; then
            echo "‚úÖ Updated $MINOR_VERSION tag"
          else
            echo "‚ùå Failed to push $MINOR_VERSION tag"
            exit 1
          fi

          echo "üéâ All version tags created: $VERSION, $MINOR_VERSION, $MAJOR_VERSION"
